/* automatically generated by rust-bindgen 0.59.1 */
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(dead_code)]

pub const OS_LITTLE_ENDIAN: u32 = 4660;
pub const OS_BIG_ENDIAN: u32 = 17185;
pub const OS_BYTE_ORDER: u32 = 4660;
pub const LOS_OK: u32 = 0;
pub const OS_FAIL: u32 = 1;
pub const OS_64BIT_MAX: i32 = -1;
pub const __LIBATOMIC_N_LOCKS: u32 = 16;
pub const OS_SYS_CLOCK: u32 = 1000000;
pub const LOSCFG_BASE_CORE_TICK_PER_SECOND: u32 = 100;
pub const LOSCFG_BASE_CORE_TICK_PER_SECOND_MINI: u32 = 1000;
pub const LOSCFG_BASE_CORE_TICK_PERIOD_MS: u32 = 10;
pub const LOSCFG_BASE_CORE_TICK_WTIMER: u32 = 0;
pub const LOSCFG_BASE_CORE_TICK_RESPONSE_MAX: u32 = 0;
pub const LOSCFG_PLATFORM_HWI: u32 = 1;
pub const LOSCFG_USE_SYSTEM_DEFINED_INTERRUPT: u32 = 1;
pub const LOSCFG_PLATFORM_HWI_LIMIT: u32 = 32;
pub const LOSCFG_BASE_CORE_TSK_DEFAULT_PRIO: u32 = 10;
pub const LOSCFG_BASE_CORE_TSK_LIMIT: u32 = 5;
pub const LOSCFG_BASE_CORE_TSK_IDLE_STACK_SIZE: u32 = 384;
pub const LOSCFG_BASE_CORE_TSK_DEFAULT_STACK_SIZE: u32 = 1024;
pub const LOSCFG_BASE_CORE_TIMESLICE: u32 = 1;
pub const LOSCFG_BASE_CORE_TIMESLICE_TIMEOUT: u32 = 20000;
pub const LOSCFG_BASE_CORE_TSK_MONITOR: u32 = 0;
pub const LOSCFG_BASE_CORE_EXC_TSK_SWITCH: u32 = 0;
pub const LOS_TASK_PRIORITY_HIGHEST: u32 = 0;
pub const LOS_TASK_PRIORITY_LOWEST: u32 = 31;
pub const LOSCFG_BASE_CORE_TASKSTACK_INDEPENDENT: u32 = 0;
pub const LOSCFG_STACK_POINT_ALIGN_SIZE: u32 = 8;
pub const LOSCFG_BASE_IPC_SEM: u32 = 1;
pub const LOSCFG_BASE_IPC_SEM_LIMIT: u32 = 6;
pub const OS_SEM_COUNTING_MAX_COUNT: u32 = 65535;
pub const LOSCFG_BASE_IPC_MUX: u32 = 1;
pub const LOSCFG_BASE_IPC_MUX_LIMIT: u32 = 6;
pub const LOSCFG_BASE_IPC_QUEUE: u32 = 1;
pub const LOSCFG_BASE_IPC_QUEUE_LIMIT: u32 = 6;
pub const LOSCFG_BASE_IPC_STATIC_QUEUE_LIMIT: u32 = 3;
pub const LOSCFG_BASE_CORE_SWTMR: u32 = 1;
pub const LOSCFG_BASE_CORE_SWTMR_LIMIT: u32 = 5;
pub const LOSCFG_BASE_CORE_TSK_SWTMR_STACK_SIZE: u32 = 1024;
pub const LOSCFG_BASE_CORE_SWTMR_ALIGN: u32 = 0;
pub const OS_SWTMR_HANDLE_QUEUE_SIZE: u32 = 5;
pub const LOS_COMMON_DIVISOR: u32 = 10;
pub const LOSCFG_SYS_EXTERNAL_HEAP: u32 = 0;
pub const LOSCFG_SYS_HEAP_SIZE: u32 = 65536;
pub const LOSCFG_MEM_MUL_POOL: u32 = 1;
pub const LOSCFG_MEM_FREE_BY_TASKID: u32 = 0;
pub const LOSCFG_BASE_MEM_NODE_INTEGRITY_CHECK: u32 = 0;
pub const LOSCFG_MEM_OMIT_LR_CNT: u32 = 4;
pub const LOSCFG_MEM_RECORD_LR_CNT: u32 = 3;
pub const LOSCFG_MEM_LEAKCHECK_RECORD_MAX_NUM: u32 = 1024;
pub const LOSCFG_MEM_WATERLINE: u32 = 1;
pub const OS_SYS_MEM_NUM: u32 = 20;
pub const OS_SYS_NOCACHEMEM_SIZE: u32 = 0;
pub const LOSCFG_MEM_MUL_REGIONS: u32 = 0;
pub const LOSCFG_EXC_HARDWARE_STACK_PROTECTION: u32 = 0;
pub const CMSIS_OS_VER: u32 = 2;
pub const LOSCFG_KERNEL_PRINTF: u32 = 1;
pub const LOSCFG_MPU_ENABLE: u32 = 0;
pub const LOSCFG_TASK_MEM_USED: u32 = 0;
pub const LOSCFG_PLATFORM_HWI_WITH_ARG: u32 = 0;
pub const LOSCFG_ARCH_HWI_VECTOR_ALIGN: u32 = 256;
pub const LOSCFG_KERNEL_SIGNAL: u32 = 0;
pub const LOSCFG_KERNEL_PM: u32 = 0;
pub const LOSCFG_KERNEL_PM_IDLE: u32 = 0;
pub const LOSCFG_SHELL_STACK_SIZE: u32 = 4096;
pub const LOG_EMG_LEVEL: u32 = 0;
pub const LOG_COMMON_LEVEL: u32 = 1;
pub const LOG_ERR_LEVEL: u32 = 2;
pub const LOG_WARN_LEVEL: u32 = 3;
pub const LOG_INFO_LEVEL: u32 = 4;
pub const LOG_DEBUG_LEVEL: u32 = 5;
pub const PRINT_LEVEL: u32 = 2;
pub type UINT8 = ::std::os::raw::c_uchar;
pub type UINT16 = ::std::os::raw::c_ushort;
pub type UINT32 = ::std::os::raw::c_uint;
pub type INT8 = ::std::os::raw::c_schar;
pub type INT16 = ::std::os::raw::c_short;
pub type INT32 = ::std::os::raw::c_int;
pub type FLOAT = f32;
pub type DOUBLE = f64;
pub type CHAR = ::std::os::raw::c_char;
pub type UINT64 = ::std::os::raw::c_ulonglong;
pub type INT64 = ::std::os::raw::c_longlong;
pub type UINTPTR = ::std::os::raw::c_uint;
pub type INTPTR = ::std::os::raw::c_int;
pub type Atomic = INT32;
pub type Atomic64 = INT64;
pub type BOOL = ::std::os::raw::c_uint;
extern "C" {
    pub static mut m_aucSysMem0: *mut UINT8;
}
pub const EXC_TYPE_EXC_REBOOT: EXC_TYPE = 0;
pub const EXC_TYPE_EXC_ASSERT: EXC_TYPE = 1;
pub const EXC_TYPE_EXC_PANIC: EXC_TYPE = 2;
pub const EXC_TYPE_EXC_STACKOVERFLOW: EXC_TYPE = 3;
pub const EXC_TYPE_EXC_INTERRUPT: EXC_TYPE = 4;
pub const EXC_TYPE_EXC_TYPE_END: EXC_TYPE = 5;
pub type EXC_TYPE = ::std::os::raw::c_uint;
pub type ExcHookFn = ::std::option::Option<unsafe extern "C" fn(excType: EXC_TYPE)>;
extern "C" {
    pub fn OsExcHookRegister(excHookFn: ExcHookFn);
}
extern "C" {
    pub fn OsDoExcHook(excType: EXC_TYPE);
}
pub const LogModuleType_LOG_MODULE_KERNEL: LogModuleType = 0;
pub const LogModuleType_LOG_MODULE_FS: LogModuleType = 1;
pub const LogModuleType_LOS_MODULE_OTHERS: LogModuleType = 2;
pub type LogModuleType = ::std::os::raw::c_uint;
extern "C" {
    pub fn printf(fmt: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OsLogLevelCheck(level: INT32) -> INT32;
}
pub type BACK_TRACE_HOOK = ::std::option::Option<
    unsafe extern "C" fn(LR: *mut UINTPTR, LRSize: UINT32, jumpCount: UINT32, SP: UINTPTR),
>;
extern "C" {
    pub fn OsBackTraceHookSet(hook: BACK_TRACE_HOOK);
}
extern "C" {
    pub fn OsBackTraceHookCall(LR: *mut UINTPTR, LRSize: UINT32, jumpCount: UINT32, SP: UINTPTR);
}
